# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy SAPL site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Create symlink
        run: |
          latest_doc=$(ls -1d docs/*/ | sort | tail -n 1)
          ln -s $(basename $latest_doc) docs/latest
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Configure referenceTemplate
        run: |
          template_path="./referenceTemplate"
          build_path="./buildReference"
          md_folder_path="./documentation-md"
          
          #Build Verzeichnis erstellen, bzw. erst loeschen und dann neu erstellen
          if [ ! -d "$build_path" ]; then
            mkdir -p $build_path
          else
            rm -r $build_path
            mkdir -p $build_path
          fi
          
          # Ordner mit Referenz-Dateien in Build-Ordner kopieren
          cp -r "$md_folder_path/"* "$build_path"
          
          # Inhalt des Referenz-Template-Ordners in jeden Build-Unterordner kopieren und Dateien aus dem Image-Ordner in den \assets\sapl_reference_images Ordner verschieben und
          # den Image-ordner loeschen
          find "$build_path" -mindepth  1 -type d | while read -r subfolder; do
            # Kopiere den Inhalt des ReferenzTemplate-Ordners in jeden gefundenen Unterordner
            cp -r "${template_path}/." "${subfolder}"
            ls ${subfolder}
            mv "${subfolder}/images/"* "${subfolder}/assets/sapl_reference_images/"
            ls ${subfolder}
            rm -rf "${subfolder}/images"
          done
          
          #echo '---' > ./documentation.md
          #echo " layout: page" >> ./documentation.md
          #echo "  title: Docs" >> ./documentation.md
          #echo "  permalink: /documentation" >> ./documentation.md
          #echo '---' >> ./documentation.md
          #echo "" >> ./documentation.md
          #echo "  ## [Latest Release 2.0.1](/docs/2.0.1/sapl-reference.html)" >> ./documentation.md
          cat >./documentation.md <<EOL
          ---
          layout: page
          title: Docs
          permalink: /documentation
          ---
          
          ## [Latest Release 2.0.1](/docs/2.0.1/sapl-reference.html)
          EOL
          
          find "$build_path" -mindepth  1 -maxdepth 1 -type d | while read -r subfolder; do
            folder_name=$(basename "$subfolder")
            echo "  ## [Latest Release $folder_name](/docs/$folder_name)" >> ./documentation.md
          done
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: |
          #gem install bundler
          #bundle install
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --config "_config.yml"
        env:
          JEKYLL_ENV: production
      - name: Build Reference
        run: |
          template_path="./referenceTemplate"
          build_path="./buildReference"
          md_folder_path="./documentation-md"

          # Wechsel in die Build-Unterordner und mit Jekyl die Seite erstellen
          find "$build_path" -mindepth  1 -maxdepth 1 -type d | while read -r subfolder; do
            folder_name=$(basename "$subfolder")
            cd "${subfolder}"
            bundle install
            bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}/docs/${folder_name}/" --config "./_config.yml"
            if [ ! -d "../../_site/docs/$folder_name" ]; then
              mkdir -p "../../_site/docs/$folder_name"
            fi
            cp -r ./_site/* ../../_site/docs/$folder_name/
          done
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
