# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy SAPL site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Create symlink
        run: |
          latest_doc=$(ls -1d documentation-md/*/ | sort | tail -n 1)
          ln -s $(basename $latest_doc) documentation-md/latest
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Configure referenceTemplate
        run: |
          template_path="./referenceTemplate"
          build_path="./buildReference"
          md_folder_path="./documentation-md"
          
          # Build Verzeichnis erstellen, bzw. erst loeschen und dann neu erstellen
          if [ ! -d "$build_path" ]; then
            mkdir -p $build_path
          else
            rm -r $build_path
            mkdir -p $build_path
          fi
          
          # Ordner der einzelnen Referenz-Versionen in Build-Ordner kopieren
          cp -r "$md_folder_path/"* "$build_path"
          
          # Inhalt des Referenz-Template-Ordners in jeden Build-Unterordner(=Referenzversionen) kopieren und Dateien aus dem Images-Ordner in den \assets\sapl_reference_images Ordner verschieben und
          # den Image-ordner loeschen
          find "$build_path" -mindepth  1 -maxdepth  1 -type d | while read -r subfolder; do
            folder_name=$(basename "$subfolder")
            if [ "${folder_name}" != "2.0.1" ]
            then
              cp -r "${template_path}/." "${subfolder}"
              cp -r "${subfolder}/images/." "${subfolder}/assets/sapl_reference_images/"
              rm -rf "${subfolder}/images"
            fi
          done
          
          # Aufbau einer neuen Documentation-Seite, in der zu den Referenzen-Seiten verlinkt wird, zuerst nur Front-Matter
          cat >./documentation.md <<EOL
          ---
          layout: page
          title: Docs
          permalink: /documentation
          ---
          EOL
          
          find "$build_path" -mindepth  1 -maxdepth  1 -type d | sort -r | while read -r subfolder; do
            folder_name=$(basename "$subfolder")
            # Erstellen der Links
            echo "## [Latest Release $folder_name](/docs/$folder_name)" >> ./documentation.md
          
            if [ "${folder_name}" != "2.0.1" ]
            then
              # Erstellt fuer jede zu bauende Referenz-Seite einen SAPL-spezifischen Back-Button und eine Selectbox die alle Referenz-Versionen enthaelt
              echo "<a href=\"{{ site.content.redirectBackToLink }}\" class=\"site-title fs-3\"><img src=\"/docs/$folder_name/assets/sapl_reference_images/SAPL_Icon_transparent.svg\" title=\"back to {% include title.html %}\"></a>" >> ${subfolder}/_includes/components/sapl_site_nav.html
              echo "<select class=\"selectbox\" id=\"saplversion\" name=\"saplversion\" style=\"width:  150px;\" onchange=\"document.location.href=this.value\">" >> ${subfolder}/_includes/components/sapl_site_nav.html
              # Fuege der Selectbox fuer Referenz-Version ein Option-Element hinzu
              find "$build_path" -mindepth  1 -maxdepth  1 -type d | sort -r | while read -r subfolder2; do
                folder_name2=$(basename "$subfolder2")
                # Hiermit wird sichergestellt, dass in der Selectbox die passende Version als Standard gesetzt und angezeigt wird
                if [ $folder_name == $folder_name2 ]
                then
                  echo "<option value=\"https://sapl.io/docs/$folder_name2\" selected>$folder_name2</option>" >> ${subfolder}/_includes/components/sapl_site_nav.html
                else
                  echo "<option value=\"https://sapl.io/docs/$folder_name2\">$folder_name2</option>" >> ${subfolder}/_includes/components/sapl_site_nav.html
                fi
              done
              echo "</select>" >> ${subfolder}/_includes/components/sapl_site_nav.html

              # Innerhalb einer Referenz-Seite wird die SAPL-Version an mehreren Stellen benoetigt. An diesen Stellen wurde der Platzhalter "XXXSAPLVERSIONXXX" hinterleget.
              # Hier wird innerhalb eines Referenz-Ordners nach diesen Stellen gesucht und durch den Namen des Referenz-Ordners(=SAPL-Referenzversion) ersetzt.
              grep -rl "XXXSAPLVERSIONXXX" "${subfolder}" | while read -r file; do
                sed -i "s/XXXSAPLVERSIONXXX/$folder_name/g" ${file}
              done
            fi
          done
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: |
          #gem install bundler
          #bundle install
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --config "_config.yml"
        env:
          JEKYLL_ENV: production
      - name: Build Reference
        run: |
          template_path="./referenceTemplate"
          build_path="./buildReference"
          md_folder_path="./documentation-md"

          # Wechsel in die Build-Unterordner, um mit Jekyl die Referenzseiten zu erstellen
          find "$build_path" -mindepth  1 -maxdepth 1 -type d | while read -r subfolder; do
            folder_name=$(basename "$subfolder")
            #Die Version 2.0.1 basiert nicht auf MD-Dateien, daher Ausnahme
            if [ "${folder_name}" != "2.0.1" ]
            then
              cd "${subfolder}"
              bundle install
              bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}/docs/${folder_name}/" --config "./_config.yml"
              if [ ! -d "../../_site/docs/$folder_name" ]; then
                mkdir -p "../../_site/docs/$folder_name"
              fi
              cp -r ./_site/* ../../_site/docs/$folder_name/
              cd ../../
            else
              cp -r $subfolder ./_site/docs/
            fi
          done
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
